import { DropdownFieldModel } from '../interfaces/DropdownFieldModel';
import { DateFieldModel } from '../interfaces/DateFieldModel';
import { TodoItemCategoryEnum } from '../../api';
import { TodoItemPriorityEnum } from '../../api';
import { TodoItemTodoStatusEnum } from '../../api';
import { TodoItem } from '../../api';
import { TableHeaderModel } from '../interfaces/TableHeaderModel';
import { InputFieldModel } from '../interfaces/InputFieldModel';
import { makeAutoObservable } from 'mobx';
import i18next from 'i18next';

class TasksData {
  public tableHeaders: TableHeaderModel<TodoItem>[] = [];
  public textFieldsString: Record<string, InputFieldModel> = {};
  public dropdowns: Record<string, DropdownFieldModel> = {};
  public dateFields: DateFieldModel[] = [];

  constructor() {
    makeAutoObservable(this);
    this.initializeTableHeaders();
    this.initializeTextFields();
    this.initializeDropdowns();
    this.initializeDateFields();

    i18next.on('languageChanged', () => {
      this.initializeTableHeaders();
      this.initializeTextFields();
      this.initializeDropdowns();
      this.initializeDateFields();
    });
  }
  private initializeTableHeaders() {
    this.tableHeaders = [
      {
        id: 'title',
        label: i18next.t('tasks.tableHeaders.title'),
        sortable: true,
        type: 'string',
        tooltip: i18next.t('tasks.tooltips.title'),
      },
      {
        id: 'batchId',
        label: i18next.t('tasks.tableHeaders.batchId'),
        sortable: true,
        type: 'number',
        tooltip: i18next.t('tasks.tooltips.batchId'),
      },
      {
        id: 'actions',
        label: i18next.t('tasks.tableHeaders.actions'),
        sortable: false,
        type: 'action',
        tooltip: i18next.t('tasks.tooltips.actions'),
      },
      {
        id: 'autoGenerated',
        label: i18next.t('tasks.tableHeaders.autoGenerated'),
        sortable: true,
        type: 'boolean',
        tooltip: i18next.t('tasks.tooltips.autoGenerated'),
      },
      {
        id: 'priority',
        label: i18next.t('tasks.tableHeaders.priority'),
        sortable: true,
        type: 'string',
        tooltip: i18next.t('tasks.tooltips.priority'),
      },
      {
        id: 'category',
        label: i18next.t('tasks.tableHeaders.category'),
        sortable: true,
        type: 'string',
        tooltip: i18next.t('tasks.tooltips.category'),
      },
      {
        id: 'todoStatus',
        label: i18next.t('tasks.tableHeaders.todoStatus'),
        sortable: true,
        type: 'string',
        tooltip: i18next.t('tasks.tooltips.todoStatus'),
      },
      {
        id: 'dueDate',
        label: i18next.t('tasks.tableHeaders.dueDate'),
        sortable: true,
        type: 'date',
        tooltip: i18next.t('tasks.tooltips.dueDate'),
      },
    ];
  }

  private initializeTextFields() {
    this.textFieldsString = {
      searchQuery: {
        key: 'searchQuery',
        label: i18next.t('tasks.textFields.searchQuery'),
        defaultValue: '',
      },
    };
  }

  private initializeDropdowns() {
    this.dropdowns = {
      category: {
        key: 'category',
        label: i18next.t('tasks.dropdowns.category'),
        options: Object.values(TodoItemCategoryEnum).map((value) => ({
          value: value,
          label: value,
        })),
        defaultValue: '',
      },
      priority: {
        key: 'priority',
        label: i18next.t('tasks.dropdowns.priority'),
        options: Object.values(TodoItemPriorityEnum).map((value) => ({
          value: value,
          label: value,
        })),
        defaultValue: '',
      },
      todoStatus: {
        key: 'todoStatus',
        label: i18next.t('tasks.dropdowns.todoStatus'),
        options: Object.values(TodoItemTodoStatusEnum).map((value) => ({
          value: value,
          label: value,
        })),
        defaultValue: '',
      },
    };
  }

  private initializeDateFields() {
    this.dateFields = [
      {
        key: 'endDate',
        label: i18next.t('tasks.dateFields.endDate'),
        defaultValue: '',
      },
      {
        key: 'startDate',
        label: i18next.t('tasks.dateFields.startDate'),
        defaultValue: '',
      },
    ];
  }
}

const tasksData = new TasksData();
export default tasksData;

/*
    autoGenerated: {
      key: 'autoGenerated',
      label: 'Auto Generated',
      options: [
        { value: 'yes', label: 'Yes' },
        { value: 'no', label: 'No' },
      ],
      defaultValue: '',
    },*/
