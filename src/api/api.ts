/* tslint:disable */
/* eslint-disable */
/**
 * EntryPoint
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from './base';

/**
 *
 * @export
 * @interface LocationItem
 */
export interface LocationItem {
  /**
   *
   * @type {number}
   * @memberof LocationItem
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof LocationItem
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof LocationItem
   */
  notes?: string | null;
  /**
   *
   * @type {number}
   * @memberof LocationItem
   */
  latitude?: number;
  /**
   *
   * @type {number}
   * @memberof LocationItem
   */
  longitude?: number;
}
/**
 *
 * @export
 * @interface MeasurementItem
 */
export interface MeasurementItem {
  /**
   *
   * @type {string}
   * @memberof MeasurementItem
   */
  title?: string | null;
  /**
   *
   * @type {number}
   * @memberof MeasurementItem
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof MeasurementItem
   */
  batchId?: number;
  /**
   *
   * @type {string}
   * @memberof MeasurementItem
   */
  lightLevel?: MeasurementItemLightLevelEnum;
  /**
   *
   * @type {string}
   * @memberof MeasurementItem
   */
  soilDryness?: MeasurementItemSoilDrynessEnum;
  /**
   *
   * @type {number}
   * @memberof MeasurementItem
   */
  soilPH?: number;
  /**
   *
   * @type {string}
   * @memberof MeasurementItem
   */
  healthStatus?: MeasurementItemHealthStatusEnum;
  /**
   *
   * @type {string}
   * @memberof MeasurementItem
   */
  growthStage?: MeasurementItemGrowthStageEnum;
  /**
   *
   * @type {number}
   * @memberof MeasurementItem
   */
  temperature?: number;
  /**
   *
   * @type {string}
   * @memberof MeasurementItem
   */
  notes?: string | null;
  /**
   *
   * @type {string}
   * @memberof MeasurementItem
   */
  date?: string | null;
}

export const MeasurementItemLightLevelEnum = {
  VeryLow: 'VeryLow',
  Low: 'Low',
  Moderate: 'Moderate',
  Light: 'Light',
  VeryLight: 'VeryLight',
} as const;

export type MeasurementItemLightLevelEnum =
  (typeof MeasurementItemLightLevelEnum)[keyof typeof MeasurementItemLightLevelEnum];
export const MeasurementItemSoilDrynessEnum = {
  VeryWet: 'VeryWet',
  Wet: 'Wet',
  Moist: 'Moist',
  Dry: 'Dry',
  VeryDry: 'VeryDry',
} as const;

export type MeasurementItemSoilDrynessEnum =
  (typeof MeasurementItemSoilDrynessEnum)[keyof typeof MeasurementItemSoilDrynessEnum];
export const MeasurementItemHealthStatusEnum = {
  Poor: 'Poor',
  Fair: 'Fair',
  Good: 'Good',
  VeryGood: 'VeryGood',
  Excellent: 'Excellent',
} as const;

export type MeasurementItemHealthStatusEnum =
  (typeof MeasurementItemHealthStatusEnum)[keyof typeof MeasurementItemHealthStatusEnum];
export const MeasurementItemGrowthStageEnum = {
  Germination: 'Germination',
  Seedling: 'Seedling',
  Vegetative: 'Vegetative',
  Budding: 'Budding',
  Flowering: 'Flowering',
  Fruiting: 'Fruiting',
  Maturity: 'Maturity',
} as const;

export type MeasurementItemGrowthStageEnum =
  (typeof MeasurementItemGrowthStageEnum)[keyof typeof MeasurementItemGrowthStageEnum];

/**
 *
 * @export
 * @interface PlantItem
 */
export interface PlantItem {
  /**
   *
   * @type {string}
   * @memberof PlantItem
   */
  commonName?: string | null;
  /**
   *
   * @type {number}
   * @memberof PlantItem
   */
  id?: number | null;
  /**
   *
   * @type {number}
   * @memberof PlantItem
   */
  waterCycle?: number;
  /**
   *
   * @type {number}
   * @memberof PlantItem
   */
  pruningCycle?: number;
  /**
   *
   * @type {number}
   * @memberof PlantItem
   */
  fertilizationCycle?: number;
  /**
   *
   * @type {number}
   * @memberof PlantItem
   */
  harvestCycle?: number;
  /**
   *
   * @type {string}
   * @memberof PlantItem
   */
  notes?: string | null;
  /**
   *
   * @type {string}
   * @memberof PlantItem
   */
  harvestStart?: PlantItemHarvestStartEnum;
  /**
   *
   * @type {string}
   * @memberof PlantItem
   */
  harvestEnd?: PlantItemHarvestEndEnum;
  /**
   *
   * @type {string}
   * @memberof PlantItem
   */
  pruningStart?: PlantItemPruningStartEnum;
  /**
   *
   * @type {string}
   * @memberof PlantItem
   */
  pruningEnd?: PlantItemPruningEndEnum;
  /**
   *
   * @type {string}
   * @memberof PlantItem
   */
  fertilizingStart?: PlantItemFertilizingStartEnum;
  /**
   *
   * @type {string}
   * @memberof PlantItem
   */
  fertilizingEnd?: PlantItemFertilizingEndEnum;
  /**
   *
   * @type {number}
   * @memberof PlantItem
   */
  phMin?: number;
  /**
   *
   * @type {number}
   * @memberof PlantItem
   */
  phMax?: number;
  /**
   *
   * @type {number}
   * @memberof PlantItem
   */
  temperatureMin?: number;
  /**
   *
   * @type {number}
   * @memberof PlantItem
   */
  temperatureMax?: number;
}

export const PlantItemHarvestStartEnum = {
  January: 'January',
  February: 'February',
  March: 'March',
  April: 'April',
  May: 'May',
  June: 'June',
  July: 'July',
  August: 'August',
  September: 'September',
  October: 'October',
  November: 'November',
  December: 'December',
} as const;

export type PlantItemHarvestStartEnum =
  (typeof PlantItemHarvestStartEnum)[keyof typeof PlantItemHarvestStartEnum];
export const PlantItemHarvestEndEnum = {
  January: 'January',
  February: 'February',
  March: 'March',
  April: 'April',
  May: 'May',
  June: 'June',
  July: 'July',
  August: 'August',
  September: 'September',
  October: 'October',
  November: 'November',
  December: 'December',
} as const;

export type PlantItemHarvestEndEnum =
  (typeof PlantItemHarvestEndEnum)[keyof typeof PlantItemHarvestEndEnum];
export const PlantItemPruningStartEnum = {
  January: 'January',
  February: 'February',
  March: 'March',
  April: 'April',
  May: 'May',
  June: 'June',
  July: 'July',
  August: 'August',
  September: 'September',
  October: 'October',
  November: 'November',
  December: 'December',
} as const;

export type PlantItemPruningStartEnum =
  (typeof PlantItemPruningStartEnum)[keyof typeof PlantItemPruningStartEnum];
export const PlantItemPruningEndEnum = {
  January: 'January',
  February: 'February',
  March: 'March',
  April: 'April',
  May: 'May',
  June: 'June',
  July: 'July',
  August: 'August',
  September: 'September',
  October: 'October',
  November: 'November',
  December: 'December',
} as const;

export type PlantItemPruningEndEnum =
  (typeof PlantItemPruningEndEnum)[keyof typeof PlantItemPruningEndEnum];
export const PlantItemFertilizingStartEnum = {
  January: 'January',
  February: 'February',
  March: 'March',
  April: 'April',
  May: 'May',
  June: 'June',
  July: 'July',
  August: 'August',
  September: 'September',
  October: 'October',
  November: 'November',
  December: 'December',
} as const;

export type PlantItemFertilizingStartEnum =
  (typeof PlantItemFertilizingStartEnum)[keyof typeof PlantItemFertilizingStartEnum];
export const PlantItemFertilizingEndEnum = {
  January: 'January',
  February: 'February',
  March: 'March',
  April: 'April',
  May: 'May',
  June: 'June',
  July: 'July',
  August: 'August',
  September: 'September',
  October: 'October',
  November: 'November',
  December: 'December',
} as const;

export type PlantItemFertilizingEndEnum =
  (typeof PlantItemFertilizingEndEnum)[keyof typeof PlantItemFertilizingEndEnum];

/**
 *
 * @export
 * @interface TodoItem
 */
export interface TodoItem {
  /**
   *
   * @type {number}
   * @memberof TodoItem
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof TodoItem
   */
  batchId?: number;
  /**
   *
   * @type {string}
   * @memberof TodoItem
   */
  title?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof TodoItem
   */
  autoGenerated?: boolean;
  /**
   *
   * @type {string}
   * @memberof TodoItem
   */
  todoStatus?: TodoItemTodoStatusEnum;
  /**
   *
   * @type {string}
   * @memberof TodoItem
   */
  dueDate?: string;
  /**
   *
   * @type {string}
   * @memberof TodoItem
   */
  priority?: TodoItemPriorityEnum;
  /**
   *
   * @type {string}
   * @memberof TodoItem
   */
  category?: TodoItemCategoryEnum;
  /**
   *
   * @type {string}
   * @memberof TodoItem
   */
  notes?: string | null;
}

export const TodoItemTodoStatusEnum = {
  NotStarted: 'NotStarted',
  InProgress: 'InProgress',
  Completed: 'Completed',
  OnHold: 'OnHold',
  Cancelled: 'Cancelled',
} as const;

export type TodoItemTodoStatusEnum =
  (typeof TodoItemTodoStatusEnum)[keyof typeof TodoItemTodoStatusEnum];
export const TodoItemPriorityEnum = {
  High: 'High',
  Medium: 'Medium',
  Low: 'Low',
} as const;

export type TodoItemPriorityEnum =
  (typeof TodoItemPriorityEnum)[keyof typeof TodoItemPriorityEnum];
export const TodoItemCategoryEnum = {
  Fertilize: 'Fertilize',
  Harvest: 'Harvest',
  Prune: 'Prune',
  Water: 'Water',
  Sow: 'Sow',
  Measure: 'Measure',
  Other: 'Other',
} as const;

export type TodoItemCategoryEnum =
  (typeof TodoItemCategoryEnum)[keyof typeof TodoItemCategoryEnum];

/**
 *
 * @export
 * @interface TurnoverItem
 */
export interface TurnoverItem {
  /**
   *
   * @type {string}
   * @memberof TurnoverItem
   */
  date?: string | null;
  /**
   *
   * @type {number}
   * @memberof TurnoverItem
   */
  amount?: number;
}
/**
 *
 * @export
 * @interface YourCropItem
 */
export interface YourCropItem {
  /**
   *
   * @type {number}
   * @memberof YourCropItem
   */
  id?: number | null;
  /**
   *
   * @type {string}
   * @memberof YourCropItem
   */
  commonName?: string | null;
  /**
   *
   * @type {number}
   * @memberof YourCropItem
   */
  amount?: number;
  /**
   *
   * @type {number}
   * @memberof YourCropItem
   */
  databaseId?: number;
  /**
   *
   * @type {string}
   * @memberof YourCropItem
   */
  location?: string | null;
  /**
   *
   * @type {string}
   * @memberof YourCropItem
   */
  planted?: string;
  /**
   *
   * @type {string}
   * @memberof YourCropItem
   */
  lastWatered?: string | null;
  /**
   *
   * @type {string}
   * @memberof YourCropItem
   */
  lastFertilized?: string | null;
  /**
   *
   * @type {string}
   * @memberof YourCropItem
   */
  lastPruned?: string | null;
  /**
   *
   * @type {string}
   * @memberof YourCropItem
   */
  lastHarvested?: string | null;
  /**
   *
   * @type {string}
   * @memberof YourCropItem
   */
  notes?: string | null;
}

/**
 * LocationApi - axios parameter creator
 * @export
 */
export const LocationApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLocationGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Location`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLocationIdDelete: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiLocationIdDelete', 'id', id);
      const localVarPath = `/api/Location/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLocationIdGet: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiLocationIdGet', 'id', id);
      const localVarPath = `/api/Location/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {LocationItem} [locationItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLocationIdPut: async (
      id: number,
      locationItem?: LocationItem,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiLocationIdPut', 'id', id);
      const localVarPath = `/api/Location/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        locationItem,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {LocationItem} [locationItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLocationPost: async (
      locationItem?: LocationItem,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Location`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        locationItem,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * LocationApi - functional programming interface
 * @export
 */
export const LocationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = LocationApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiLocationGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<LocationItem>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiLocationGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['LocationApi.apiLocationGet']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiLocationIdDelete(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiLocationIdDelete(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['LocationApi.apiLocationIdDelete']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiLocationIdGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationItem>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiLocationIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['LocationApi.apiLocationIdGet']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {LocationItem} [locationItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiLocationIdPut(
      id: number,
      locationItem?: LocationItem,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiLocationIdPut(
          id,
          locationItem,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['LocationApi.apiLocationIdPut']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {LocationItem} [locationItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiLocationPost(
      locationItem?: LocationItem,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiLocationPost(
        locationItem,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['LocationApi.apiLocationPost']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * LocationApi - factory interface
 * @export
 */
export const LocationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = LocationApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLocationGet(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<LocationItem>> {
      return localVarFp
        .apiLocationGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLocationIdDelete(
      id: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiLocationIdDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLocationIdGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<LocationItem> {
      return localVarFp
        .apiLocationIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {LocationItem} [locationItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLocationIdPut(
      id: number,
      locationItem?: LocationItem,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiLocationIdPut(id, locationItem, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {LocationItem} [locationItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLocationPost(
      locationItem?: LocationItem,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiLocationPost(locationItem, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * LocationApi - object-oriented interface
 * @export
 * @class LocationApi
 * @extends {BaseAPI}
 */
export class LocationApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LocationApi
   */
  public apiLocationGet(options?: RawAxiosRequestConfig) {
    return LocationApiFp(this.configuration)
      .apiLocationGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LocationApi
   */
  public apiLocationIdDelete(id: number, options?: RawAxiosRequestConfig) {
    return LocationApiFp(this.configuration)
      .apiLocationIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LocationApi
   */
  public apiLocationIdGet(id: number, options?: RawAxiosRequestConfig) {
    return LocationApiFp(this.configuration)
      .apiLocationIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {LocationItem} [locationItem]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LocationApi
   */
  public apiLocationIdPut(
    id: number,
    locationItem?: LocationItem,
    options?: RawAxiosRequestConfig,
  ) {
    return LocationApiFp(this.configuration)
      .apiLocationIdPut(id, locationItem, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {LocationItem} [locationItem]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LocationApi
   */
  public apiLocationPost(
    locationItem?: LocationItem,
    options?: RawAxiosRequestConfig,
  ) {
    return LocationApiFp(this.configuration)
      .apiLocationPost(locationItem, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * MeasurementsApi - axios parameter creator
 * @export
 */
export const MeasurementsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiMeasurementsIdDelete: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiMeasurementsIdDelete', 'id', id);
      const localVarPath = `/api/Measurements/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiMeasurementsIdGet: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiMeasurementsIdGet', 'id', id);
      const localVarPath = `/api/Measurements/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {MeasurementItem} [measurementItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiMeasurementsIdPut: async (
      id: number,
      measurementItem?: MeasurementItem,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiMeasurementsIdPut', 'id', id);
      const localVarPath = `/api/Measurements/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        measurementItem,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {MeasurementItem} [measurementItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiMeasurementsPost: async (
      measurementItem?: MeasurementItem,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Measurements`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        measurementItem,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurements: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Measurements`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MeasurementsApi - functional programming interface
 * @export
 */
export const MeasurementsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    MeasurementsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiMeasurementsIdDelete(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiMeasurementsIdDelete(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['MeasurementsApi.apiMeasurementsIdDelete']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiMeasurementsIdGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<MeasurementItem>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiMeasurementsIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['MeasurementsApi.apiMeasurementsIdGet']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {MeasurementItem} [measurementItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiMeasurementsIdPut(
      id: number,
      measurementItem?: MeasurementItem,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiMeasurementsIdPut(
          id,
          measurementItem,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['MeasurementsApi.apiMeasurementsIdPut']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {MeasurementItem} [measurementItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiMeasurementsPost(
      measurementItem?: MeasurementItem,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiMeasurementsPost(
          measurementItem,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['MeasurementsApi.apiMeasurementsPost']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMeasurements(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<MeasurementItem>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getMeasurements(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['MeasurementsApi.getMeasurements']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * MeasurementsApi - factory interface
 * @export
 */
export const MeasurementsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = MeasurementsApiFp(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiMeasurementsIdDelete(
      id: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiMeasurementsIdDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiMeasurementsIdGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<MeasurementItem> {
      return localVarFp
        .apiMeasurementsIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {MeasurementItem} [measurementItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiMeasurementsIdPut(
      id: number,
      measurementItem?: MeasurementItem,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiMeasurementsIdPut(id, measurementItem, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {MeasurementItem} [measurementItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiMeasurementsPost(
      measurementItem?: MeasurementItem,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiMeasurementsPost(measurementItem, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeasurements(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<MeasurementItem>> {
      return localVarFp
        .getMeasurements(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * MeasurementsApi - object-oriented interface
 * @export
 * @class MeasurementsApi
 * @extends {BaseAPI}
 */
export class MeasurementsApi extends BaseAPI {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeasurementsApi
   */
  public apiMeasurementsIdDelete(id: number, options?: RawAxiosRequestConfig) {
    return MeasurementsApiFp(this.configuration)
      .apiMeasurementsIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeasurementsApi
   */
  public apiMeasurementsIdGet(id: number, options?: RawAxiosRequestConfig) {
    return MeasurementsApiFp(this.configuration)
      .apiMeasurementsIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {MeasurementItem} [measurementItem]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeasurementsApi
   */
  public apiMeasurementsIdPut(
    id: number,
    measurementItem?: MeasurementItem,
    options?: RawAxiosRequestConfig,
  ) {
    return MeasurementsApiFp(this.configuration)
      .apiMeasurementsIdPut(id, measurementItem, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {MeasurementItem} [measurementItem]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeasurementsApi
   */
  public apiMeasurementsPost(
    measurementItem?: MeasurementItem,
    options?: RawAxiosRequestConfig,
  ) {
    return MeasurementsApiFp(this.configuration)
      .apiMeasurementsPost(measurementItem, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeasurementsApi
   */
  public getMeasurements(options?: RawAxiosRequestConfig) {
    return MeasurementsApiFp(this.configuration)
      .getMeasurements(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PlantApi - axios parameter creator
 * @export
 */
export const PlantApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlantIdDelete: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiPlantIdDelete', 'id', id);
      const localVarPath = `/api/Plant/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlantIdGet: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiPlantIdGet', 'id', id);
      const localVarPath = `/api/Plant/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {PlantItem} [plantItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlantIdPut: async (
      id: number,
      plantItem?: PlantItem,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiPlantIdPut', 'id', id);
      const localVarPath = `/api/Plant/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        plantItem,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {PlantItem} [plantItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlantPost: async (
      plantItem?: PlantItem,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Plant`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        plantItem,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlants: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Plant`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PlantApi - functional programming interface
 * @export
 */
export const PlantApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PlantApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPlantIdDelete(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiPlantIdDelete(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PlantApi.apiPlantIdDelete']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPlantIdGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlantItem>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiPlantIdGet(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PlantApi.apiPlantIdGet']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {PlantItem} [plantItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPlantIdPut(
      id: number,
      plantItem?: PlantItem,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiPlantIdPut(
        id,
        plantItem,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PlantApi.apiPlantIdPut']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {PlantItem} [plantItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPlantPost(
      plantItem?: PlantItem,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiPlantPost(
        plantItem,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PlantApi.apiPlantPost']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPlants(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<PlantItem>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getPlants(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PlantApi.getPlants']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PlantApi - factory interface
 * @export
 */
export const PlantApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PlantApiFp(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlantIdDelete(
      id: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiPlantIdDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlantIdGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PlantItem> {
      return localVarFp
        .apiPlantIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {PlantItem} [plantItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlantIdPut(
      id: number,
      plantItem?: PlantItem,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiPlantIdPut(id, plantItem, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {PlantItem} [plantItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPlantPost(
      plantItem?: PlantItem,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiPlantPost(plantItem, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlants(options?: RawAxiosRequestConfig): AxiosPromise<Array<PlantItem>> {
      return localVarFp
        .getPlants(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PlantApi - object-oriented interface
 * @export
 * @class PlantApi
 * @extends {BaseAPI}
 */
export class PlantApi extends BaseAPI {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlantApi
   */
  public apiPlantIdDelete(id: number, options?: RawAxiosRequestConfig) {
    return PlantApiFp(this.configuration)
      .apiPlantIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlantApi
   */
  public apiPlantIdGet(id: number, options?: RawAxiosRequestConfig) {
    return PlantApiFp(this.configuration)
      .apiPlantIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {PlantItem} [plantItem]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlantApi
   */
  public apiPlantIdPut(
    id: number,
    plantItem?: PlantItem,
    options?: RawAxiosRequestConfig,
  ) {
    return PlantApiFp(this.configuration)
      .apiPlantIdPut(id, plantItem, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {PlantItem} [plantItem]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlantApi
   */
  public apiPlantPost(plantItem?: PlantItem, options?: RawAxiosRequestConfig) {
    return PlantApiFp(this.configuration)
      .apiPlantPost(plantItem, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlantApi
   */
  public getPlants(options?: RawAxiosRequestConfig) {
    return PlantApiFp(this.configuration)
      .getPlants(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * TodoApi - axios parameter creator
 * @export
 */
export const TodoApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTodoIdDelete: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiTodoIdDelete', 'id', id);
      const localVarPath = `/api/Todo/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTodoIdGet: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiTodoIdGet', 'id', id);
      const localVarPath = `/api/Todo/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {TodoItem} [todoItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTodoIdPut: async (
      id: number,
      todoItem?: TodoItem,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiTodoIdPut', 'id', id);
      const localVarPath = `/api/Todo/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        todoItem,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {TodoItem} [todoItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTodoPost: async (
      todoItem?: TodoItem,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Todo`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        todoItem,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTodoItems: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Todo`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TodoApi - functional programming interface
 * @export
 */
export const TodoApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TodoApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiTodoIdDelete(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiTodoIdDelete(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['TodoApi.apiTodoIdDelete']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiTodoIdGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TodoItem>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiTodoIdGet(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['TodoApi.apiTodoIdGet']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {TodoItem} [todoItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiTodoIdPut(
      id: number,
      todoItem?: TodoItem,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiTodoIdPut(
        id,
        todoItem,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['TodoApi.apiTodoIdPut']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {TodoItem} [todoItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiTodoPost(
      todoItem?: TodoItem,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiTodoPost(
        todoItem,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['TodoApi.apiTodoPost']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTodoItems(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<TodoItem>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getTodoItems(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['TodoApi.getTodoItems']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * TodoApi - factory interface
 * @export
 */
export const TodoApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TodoApiFp(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTodoIdDelete(
      id: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiTodoIdDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTodoIdGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<TodoItem> {
      return localVarFp
        .apiTodoIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {TodoItem} [todoItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTodoIdPut(
      id: number,
      todoItem?: TodoItem,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiTodoIdPut(id, todoItem, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {TodoItem} [todoItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTodoPost(
      todoItem?: TodoItem,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiTodoPost(todoItem, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTodoItems(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<TodoItem>> {
      return localVarFp
        .getTodoItems(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * TodoApi - object-oriented interface
 * @export
 * @class TodoApi
 * @extends {BaseAPI}
 */
export class TodoApi extends BaseAPI {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TodoApi
   */
  public apiTodoIdDelete(id: number, options?: RawAxiosRequestConfig) {
    return TodoApiFp(this.configuration)
      .apiTodoIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TodoApi
   */
  public apiTodoIdGet(id: number, options?: RawAxiosRequestConfig) {
    return TodoApiFp(this.configuration)
      .apiTodoIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {TodoItem} [todoItem]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TodoApi
   */
  public apiTodoIdPut(
    id: number,
    todoItem?: TodoItem,
    options?: RawAxiosRequestConfig,
  ) {
    return TodoApiFp(this.configuration)
      .apiTodoIdPut(id, todoItem, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {TodoItem} [todoItem]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TodoApi
   */
  public apiTodoPost(todoItem?: TodoItem, options?: RawAxiosRequestConfig) {
    return TodoApiFp(this.configuration)
      .apiTodoPost(todoItem, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TodoApi
   */
  public getTodoItems(options?: RawAxiosRequestConfig) {
    return TodoApiFp(this.configuration)
      .getTodoItems(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * TurnoverApi - axios parameter creator
 * @export
 */
export const TurnoverApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTurnovers: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Turnover`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TurnoverApi - functional programming interface
 * @export
 */
export const TurnoverApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TurnoverApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTurnovers(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<TurnoverItem>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getTurnovers(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['TurnoverApi.getTurnovers']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * TurnoverApi - factory interface
 * @export
 */
export const TurnoverApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TurnoverApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTurnovers(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<TurnoverItem>> {
      return localVarFp
        .getTurnovers(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * TurnoverApi - object-oriented interface
 * @export
 * @class TurnoverApi
 * @extends {BaseAPI}
 */
export class TurnoverApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TurnoverApi
   */
  public getTurnovers(options?: RawAxiosRequestConfig) {
    return TurnoverApiFp(this.configuration)
      .getTurnovers(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * WeatherApi - axios parameter creator
 * @export
 */
export const WeatherApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {string} [city]
     * @param {number} [days]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWeatherForecastGet: async (
      city?: string,
      days?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Weather/forecast`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (city !== undefined) {
        localVarQueryParameter['city'] = city;
      }

      if (days !== undefined) {
        localVarQueryParameter['days'] = days;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * WeatherApi - functional programming interface
 * @export
 */
export const WeatherApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = WeatherApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} [city]
     * @param {number} [days]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiWeatherForecastGet(
      city?: string,
      days?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiWeatherForecastGet(
          city,
          days,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['WeatherApi.apiWeatherForecastGet']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * WeatherApi - factory interface
 * @export
 */
export const WeatherApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = WeatherApiFp(configuration);
  return {
    /**
     *
     * @param {string} [city]
     * @param {number} [days]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiWeatherForecastGet(
      city?: string,
      days?: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiWeatherForecastGet(city, days, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * WeatherApi - object-oriented interface
 * @export
 * @class WeatherApi
 * @extends {BaseAPI}
 */
export class WeatherApi extends BaseAPI {
  /**
   *
   * @param {string} [city]
   * @param {number} [days]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WeatherApi
   */
  public apiWeatherForecastGet(
    city?: string,
    days?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return WeatherApiFp(this.configuration)
      .apiWeatherForecastGet(city, days, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * YourCropsApi - axios parameter creator
 * @export
 */
export const YourCropsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiYourCropsIdDelete: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiYourCropsIdDelete', 'id', id);
      const localVarPath = `/api/YourCrops/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiYourCropsIdGet: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiYourCropsIdGet', 'id', id);
      const localVarPath = `/api/YourCrops/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {YourCropItem} [yourCropItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiYourCropsIdPut: async (
      id: number,
      yourCropItem?: YourCropItem,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiYourCropsIdPut', 'id', id);
      const localVarPath = `/api/YourCrops/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        yourCropItem,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {YourCropItem} [yourCropItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiYourCropsPost: async (
      yourCropItem?: YourCropItem,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/YourCrops`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        yourCropItem,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCrops: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/YourCrops`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * YourCropsApi - functional programming interface
 * @export
 */
export const YourCropsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    YourCropsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiYourCropsIdDelete(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiYourCropsIdDelete(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['YourCropsApi.apiYourCropsIdDelete']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiYourCropsIdGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<YourCropItem>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiYourCropsIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['YourCropsApi.apiYourCropsIdGet']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {YourCropItem} [yourCropItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiYourCropsIdPut(
      id: number,
      yourCropItem?: YourCropItem,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiYourCropsIdPut(
          id,
          yourCropItem,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['YourCropsApi.apiYourCropsIdPut']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {YourCropItem} [yourCropItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiYourCropsPost(
      yourCropItem?: YourCropItem,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiYourCropsPost(yourCropItem, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['YourCropsApi.apiYourCropsPost']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCrops(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<YourCropItem>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCrops(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['YourCropsApi.getCrops']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * YourCropsApi - factory interface
 * @export
 */
export const YourCropsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = YourCropsApiFp(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiYourCropsIdDelete(
      id: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiYourCropsIdDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiYourCropsIdGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<YourCropItem> {
      return localVarFp
        .apiYourCropsIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {YourCropItem} [yourCropItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiYourCropsIdPut(
      id: number,
      yourCropItem?: YourCropItem,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiYourCropsIdPut(id, yourCropItem, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {YourCropItem} [yourCropItem]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiYourCropsPost(
      yourCropItem?: YourCropItem,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiYourCropsPost(yourCropItem, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCrops(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<YourCropItem>> {
      return localVarFp
        .getCrops(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * YourCropsApi - object-oriented interface
 * @export
 * @class YourCropsApi
 * @extends {BaseAPI}
 */
export class YourCropsApi extends BaseAPI {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof YourCropsApi
   */
  public apiYourCropsIdDelete(id: number, options?: RawAxiosRequestConfig) {
    return YourCropsApiFp(this.configuration)
      .apiYourCropsIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof YourCropsApi
   */
  public apiYourCropsIdGet(id: number, options?: RawAxiosRequestConfig) {
    return YourCropsApiFp(this.configuration)
      .apiYourCropsIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {YourCropItem} [yourCropItem]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof YourCropsApi
   */
  public apiYourCropsIdPut(
    id: number,
    yourCropItem?: YourCropItem,
    options?: RawAxiosRequestConfig,
  ) {
    return YourCropsApiFp(this.configuration)
      .apiYourCropsIdPut(id, yourCropItem, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {YourCropItem} [yourCropItem]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof YourCropsApi
   */
  public apiYourCropsPost(
    yourCropItem?: YourCropItem,
    options?: RawAxiosRequestConfig,
  ) {
    return YourCropsApiFp(this.configuration)
      .apiYourCropsPost(yourCropItem, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof YourCropsApi
   */
  public getCrops(options?: RawAxiosRequestConfig) {
    return YourCropsApiFp(this.configuration)
      .getCrops(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
